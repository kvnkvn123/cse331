CSE 331 Homework 4.  Answers to Written questions.
Edit this file to supply your answers.

Name:  <replace this with your name>

Problem 0.

We define a method for adding polynomials to terms
as defined by the following pseudocode:

	// here t_p is a polynomial term, q is a polynomial
    r = t_p + q:
        set r = q by making a term-by-term copy of all terms in q to r
        if any term, t_r, in r has the same degree as t_p,
            then replace t_r in r with the sum of t_p and t_r
        else insert t_p into r as a new term
		return r;



(a)
Pseudocode:

	r = p * q:
		set r = 0;
		for each term t_p in p:
			for each term t_q in q:
				// using addition of polynomial and terms defined above
				r = r + (t_p * t_q);


(b) Note: we use polynomial addition and addition between
		polynomials and terms as defined above and in
		example 
		
Pseudocode:

	q = u / v:
		set rem = u by making a term by term copy of all terms in u
		set q = 0;
		while (degree of rem is >= degree of v):
			set t_1 = term with largest degree in rem divided
					 by term with largest degree in v;
			set temp = 0;
			foreach term t_v in v:
				temp = temp + (t_1 * t_v * -1);
			rem = rem + temp;
			q = q + t_1;	;	


(c) Illustration of (x^3+x-1) / (x+1) = x^2-x+2:

	set rem = copy of u = (x^3+x-1);
	set q = 0;
	while (degree of rem >= degree of v) {
		Iteration 1: passes test (3 >= 1)
			set t_1 = x^3 / x = x^2;
			set temp = 0;
			for each term t_v in v:
				Iteration 1: (x)
					temp = 0 + (x^2 * x * -1) = -x^3;
				Iteration 2: (1)
					temp = -x^3 + (x^2 * 1 * -1) = (-x^3 - x^2);
			rem = (x^3+x-1) + (-x^3 - x^2) = (-x^2 + x - 1);
			q = 0 + x^2 = x^2;
		Iteration 2: passes test (2 >= 1)
			set t_1 = -x^2 / x = -x;
			set temp = 0;
			for each term t_v in v:
				Iteration 1: (x)
					temp = 0 + (-x * x * -1) = x^2;
				Iteration 2: (1)
					temp = x^2 + (-x * 1 * -1) = (x^2 + x);
			rem = (-x^2 + x - 1 + (x^2 + x) = (2x - 1);
			q = x^2 + (-x) = x^2 - x;
		Iteration 3: passes test (1 >= 1)
			set t_1 = 2x / x = 2;
			set temp = 0;
			for each term t_v in v:
				Iteration 1: (x)
					temp = 0 + (2 * x * -1) = -2x;
				Iteration 2: (1)
					temp = -2x + (2 * 1 * -1) = (-2x - 2);
			rem = (2x - 1) + (-2x - 2) = -3;
			q = (x^2 - x) + 2 = (x^2 - x + 2);
		Iteration 4: fails test (0 !>= 1)
		
		we are done: q = (x^2 - x + 2)


Problem 1.

(a) If the representation invariant was changed is mentioned:
	1. The two argument constructor would not need to change,
		but could change to omit finding the reduced form of given
		arguments, leading so slightly less runtime and complexity,
		and easir readability
	2. checkRep() would have to change to no longer check for
		reduced form. Reading to slightly less runtime and complexity
	3. hashCode() method would need to have code to find the
		reduced form of a the numer and denom and then create a 
		hashcode from that to ensure equal fractions create equal
		hashcodes. Slight increase in time and comlexity.
	4. equals() method would need to have code to find the reduced
		form of both this and the argument RatNum, so that
		it could compare for equality if neither equal NaN. This
		would increase complexity and runtime, and change code 
		clarity slightly.
	5. toString() would need to have code to compute the reduced
		form of the RatNum to ensure that returned string is
		in reduced form. Slightly less efficient
	
	All these methods could have the same code to reduce the RatNum
	factored out into a private method, however, it seems easier
	to keep the RepInvariant as it currently is.


(b) In the first case, this change would make the class mutable, which
	is against the RatNum specification. In terms of the method specifications
	none of these methods have a modifies clause, however for these
	new implementations, they would all need a @requires this in the documentation.
	

(c) Calls to checkRep() are only needed in the constructor because the 
	RatNum class in immutable. Due to the fact that the fields are
	final, the fields and themselves immutable, and
	the client never gains access to the fields, and because
	there are no mutator methods (methods either observe and report
	RatNum conditions or create new RatNums) the only 
	place where the repInvariant of the class could be violated is in
	the constructor.


Problem 2.

(a) I placed a checkRep() method at the start of every public method. In
my methods, it did not make sense to place it at the end, since either a
constructor was called (which calls checkRep()) or there was no meaningful
place to place checkRep(), since there is not point placing it after a return.
These calls were placed as a precaution; many of my methods depended on the 
repInvariant being true. In some cases, it seemed unnecessary, but was kept
anyway.


(b)	1. The toString methods would have to be changed to return just 0 for
	the zero RatTerm; currently this is tested under the if e == 0 test,
	this would just require an extra test for if arg.isZero(), not much
	complexity added.
	2. The hashCode() method would need to be changed to accomodate for 
	zero, since two zero RatNum's nay have different exponents. This is
	a small change in complexity (requiring an if statement)
	3. The equals() method would need to change, to have a case for 
	two RatNums that equal zero; this would be a small change in complexity.
	4. Obviously, checkRep() would need to change.
	5. The constructor does not need to change, but could change to allow
	for zero values to have different exponents.	


(c) 1. The constructor would need to change, checking if the given
	coeff is NaN, and setting expt to zero is so. This would add one test
	increasing complexity slightly
	2. checkRep() would obviously need to change
	
	In all, there are not many changed, since most of the code tests
	for isNaN(), and then returms the standard field NaN if so. I prefer the
	representation invariant that doesn't require constraints on the 
	exponent, since it allows for an easier constructor and there is no
	other difference.
	

Problem 5.
