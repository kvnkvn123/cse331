CSE 331 Homework 3.  Answers to Written questions.
Edit this file to supply your answers.

Name: Tushar Khurana

Problem 6.

(a) Fibonacci failed the testThrowsIllegalArgumentException test 
because it initially threw an exception when asked to generate the 
0th Fibonacci term (fib.getFibTerm(0)), which is non negative and
should be generated since this series starts at a zero index. To
fix this, I had to change the IllegalArgumentException test of 
the getFibTerm method from if (n <= 0) to if (n < 0).


(b) Fibonacci failed the testBaseCase test because it threw
an IllegalArgumentException for the base case zero. This 
was also fixed by the change mentioned in the answer about, by
changing the IllegalArgumentException test of
the getFibTerm method from if (n <= 0) to if (n < 0).


(c) Fibanacci failed the testInductiveCase test for a number
of reasons; it threw an exception for the 0th fibonacci
number, it calculated 1 and 2 as the base cases, and its
recursive definition was wrong (it subtracted instead of
added the previous two fibonacci numbers. So, apart from the
change mentioned in the previous two answers, I had to
change the else if test (base cases) to else if (n < 2),
and I needed to change the else test (recursive case) 
from getFibTerm(n - 1) - getFibTerm(n - 2) to
getFibTerm(n - 1) + getFibTerm(n - 2). 


Problem 7. 

(a)Changes made in Ball:
(1) Changed volume method to assign argument value to this.volume
so that the class field would be updates
(2) Changed the return value in getVolume() from 0 to this.volume,
so accurately return the volume of the ball

(b)BallContainer design question:
Of the two approaches to implementing getVolume(), I think there 
would be a definite answer of which is better if we knew
the way in which the class was going to be used. Both have pros
and cons; if the BallContainer is frequently changed and has
 small number of balls, having a getVolume() that computes the
 volume each time it is called might be more efficient, while
 if getVolume() is called frequently, or there are a large
 number of balls in the container, the approach of having 
 a separate volume is probably most efficient. As it is, I chose
 the approach of having a private field storing the volume of
 all balls, and this value being modified each time the container 
 is added to, removed from, or cleared. With no more information, 
 I think that having an if statement in each of these methods is
  more efficient that computing the volume each time getVolume() 
  is called. 
  
 (c) Box design question
 (1) I could think of a few different ways to implement
 getBallsFromSmallest(). In many ways, I thought it would be most
 efficient to do away with the use of BallContainer in Box, or at
 least change the BallContainer set to a TreeSet or some other 
 ordered collection. However, given the specification of not changing
 these previous classes, I considered at first creating a parallel
 data structure to the ballContainer which would store the balls in sorted order, 
 such as a TreeSet. This would be similar to having the field totalVolume in 
 BallContainer to avoid computing the total Volume every time get volume
 is called. Since this field would only store references to Ball objects,
 it would not take much space, and simple additions to the add and
 remove method would allow the class to update this field in sync with
 the ballContainer field.
 	The approach that I ultimately went with was to find the ordering
 of the balls in the box every time the method getBallFromSmallest() 
 is called. This approach involved using the iterator (for each loop)
 to add all balls in bbox to a list, sort the list using the build in
 sort method in the List interface and then return an iterator of this
 list.
 	Both of these approaches required the use of a comparator class
 to compare the volume of the Ball objects. 
 
(2) Again, to answer which approach is better, it would be necessary to
know how these classes are to be used. The first approach would probably
have been more efficient in the long run, since it does not involve 
creating new data structures and doing a sorting algorithm with
every call of the getBallFromSmallest() method. However, I chose
to go with the second method because it was easier to write, and
it seemed that, given the specification, we were trying to make this
class easy to write by recycling code. 

